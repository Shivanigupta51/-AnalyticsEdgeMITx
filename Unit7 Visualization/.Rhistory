boxplot(cPoorest$lifeExp, cPoor$lifeExp, cAverage$lifeExp, cRich$lifeExp, col=rainbow())
boxplot(cPoorest$lifeExp, cPoor$lifeExp, cAverage$lifeExp, cRich$lifeExp, col=rainbow(4))
boxplot(cPoorest$lifeExp, cPoor$lifeExp, cAverage$lifeExp, cRich$lifeExp, col=rainbow(4))
q()
q()
install.packages('geoR')
require(geoR)
data(elevation)
(elevation)
str(elevation)
plot(elevation)
image(seq(10, 300, 1), seq(10, 300, 1), z,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data")
box()
box()
plot(elevation)
str(elevation)
str(elevation$x)
str(elevation.x)
(elevation)
(elevation)
elevation
data(elevation)
str(elevation)
summary(elevation)
library(lattice)
library(nutshell)
install.packages(nutshell)
install.packages('nutshell')
data(births2006.smpl)
library(lattice)
library(nutshell)
data(births2006.smpl)
births2006.smpl
plot(births2006.smpl)
dim(births2006.smpl)
str(births2006.smpl)
table(births2006.smpl$DOB_WK)
plot(table(births2006.smpl$DOB_WK))
barplot(table(births2006.smpl$DOB_WK))
str(births2006.smpl)
barplot(table(births2006.smpl$DOB_WK, births2006.smpl$DMETH_REC))
(table(births2006.smpl$DOB_WK, births2006.smpl$DMETH_REC))
barplot(table(births2006.smpl$DOB_WK, births2006.smpl$DMETH_REC, http://bugs.mysql.com/bug.php?id=56744))
(table(births2006.smpl$DMETH_REC, births2006.smpl$DOB_WK))
plot(table(births2006.smpl$DMETH_REC, births2006.smpl$DOB_WK))
barchart(table(births2006.smpl$DMETH_REC, births2006.smpl$DOB_WK))
print("hello")
paste0(installed.packages()[,"Package"], "-", installed.packages()[,"Version"])
paste0(installed.packages()[,"Package"], "-", installed.packages()[,"Version"])
print("hello")
weights <- c(300, 200, 100, 250, 150)
prices <- c(9000, 5000, 12000, 7500, 18000)
chests <- c('gold', 'silver', 'gems', 'gold', 'gems')
types <- factor(chests)
table(chest)
table(chests)
factor(chests)
qplot(weights, prices, color = types)
install.packages('ggplot2')
qplot(weights, prices, color = types)
library('ggplot2')
qplot(weights, prices, color = types)
q()
ls()
gDat
ls()
life
boxplot(life)
str(life)
attach(life)
boxplot(LifeExpectancy, Country)
boxplot(LifeExpectancy~Country)
boxplot(LifeExpectancy~Region)
boxplot(LifeExpectancy~Region, col="black")
boxplot(LifeExpectancy~Region)
table(Region)
table(Country, Region)
str(life)
aggregate(Region, LifeExpectancy, data=life, FUN=mean)
aggregate(LifeExpectancy, data=life, FUN=mean)
?aggregate
aggregate(LifeExpectancy, Region, data=life, FUN=mean)
aggregate(LifeExpectancy, life$Region, data=life, FUN=mean)
aggregate(LifeExpectancy, Region, data=life, FUN=mean)
life
ls()
lifenow
str(lifenow)
ls()
l
live
str(live)
ls()
life
head(life)
split(life, Region)
lifeSplit <- split(life, Region)
str(lifeSpli)
str(lifeSplit)
plot(lifeSplit)
boxplot(lifeSplit)
boxplot(lifeSplit$SSA)
boxplot(lifeSplit$SSA$LifeExpectancy)
boxplot(life, Region)
boxplot(Region, life)
boxplot(LifeExpectancy~Region)
ls()
sal
boxplot(sal$Salary)
ls()
weights
types
cPoor
ls()
cHalf1
str(cHalf1)
boxplot(cHalf1$lifeExp~cHalf1$continent)
boxplot(cHalf1$gdpPercap~cHalf1$continent)
boxplot(cHalf1$lifeExp~cHalf1$continent)
boxplot(cHalf1$gdpPercap~cHalf1$continent)
boxplot(cHalf1$lifeExp~cHalf1$continent)
boxplot(cHalf1$gdpPercap~cHalf1$continent)
boxplot(cHalf1$lifeExp~cHalf1$continent)
boxplot(cHalf1$gdpPercap~cHalf1$continent)
boxplot(cHalf1$lifeExp~cHalf1$continent)
boxplot(cHalf1$gdpPercap~cHalf1$pop)
plot(cHalf1$gdpPercap~cHalf1$pop)
cor.test(cHalf1$gdpPercap~cHalf1$pop)
cor.test(cHalf1$gdpPercap,cHalf1$pop)
cor.test(cHalf1$gdpPercap,cHalf1$lifeExp)
plot(cHalf1$gdpPercap,cHalf1$lifeExp)
installed.packages()
installed.packages()
q()
ls()
install.packages('ISLR');
library('ISLR');
data
data()
data(ISLR)
data('ISLR')
example(data)
data(package='ISLR')
income<-read.csv('Downloads/Income1.csv', header=T)
str(income);
plot(income$Education, income$Income)
lm
?lm
str(income)
attach(income);
incomelm<-lm(Income~Education)
incomelm
plot(incomelm)
incomelm
summary(incomelm)
anova(incomelm)
plot(incomelm)
(incomelm)
str(incomelm)
summary(incomelm)
plot(incomelm)
(incomelm)
summary(incomelm)
fitted(incomelm)
plot(fitted(incomelm))
coef(incomelm)
intercept(incomelm)
names(incomelm)
?lm
example(lm)
example(lm)
example(lm)
q()
ls()
rm(list=ls())
ls()
q()
ls()
setwd('data_R/common/preprocess.R');
source('data_R/common/preprocess.R');
ls()
str(ds);
ls()
str(ds);
str(ds);
constants
cor(ds[which
(sapply(ds, is.numeric))], use
="complete.obs"
)
ds[which(sapply(ds, is.numeric))]
head(ds[which(sapply(ds, is.numeric))])
cor(ds[which(sapply(ds, is.numeric))])
corgram(ds[which(sapply(ds, is.numeric))])
corrgram(ds[which(sapply(ds, is.numeric))])
cor(ds[which(sapply(ds, is.numeric))])
cor(ds[which(sapply(ds, is.numeric))], use="complete.obs")
which(sapply(ds, is.numeric))
which(dapply(ds, is.numeric))
?sapply
which(vapply(ds, is.numeric))
which(lapply(ds, is.numeric))
ls()
str(ds)
dim(ds)
nobs
sample(nobs, 0.7*nobs)
q()
ls()
ds
head(ds)
str(ds)
attach(ds)
install.packages('KernSmooth');
library(KernSmooth);
1/0
str(Inf)
library(datasets);
head(airquality);
attach(airquality)
tapply(Ozone, Month, mean)
tapply(Ozone, Month, mean, rm.na=T)
tapply(Ozone, Month, mean, na.omit=T)
tapply(Ozone, Month, mean, na.rm=T)
str(airquality)
?split
split(airquality, Month)
rowMeans(split(airquality, Month))
rowMeans(split(airquality, Month))
colMeans(split(airquality, Month))
colMeans
colMeans(split(airquality, Month))
interaction
interaction()
str(interaction())
str(interaction)
colMeans(split(airquality, Month))
1/0
0/0
log(-1)
log(-2)
log(1)
log(2)
log(3)
log(e3)
NA>0
NA<0
(NA<0)
if (NA<0) {print "aaa"}
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
g(2)
gf2)
f(2)
f(1)
3L
a=1
b=2
f<-function(x)
{
a*x + b
}
g<-function(x)
{
a=2
b=1
f(x)
}
g(2)
q()
ls()
a
b
cube
cube(b)
ds
str(ds)
getwd()
setwd('data_R/AnalyticsEdge/Unit7 Visualization/')
rm(list=ls())
gc()
if (getwd()=="C:/Dokumente und Einstellungen/cu/Eigene Dateien") setwd('data_R/AnalyticsEdge/Unit7 Visualization/')
edges = read.csv('edges.csv')
users = read.csv('edges.csv')
dim(edges)
dim(users)
edges
users
str(users)
edges = read.csv('edges.csv')
users = read.csv('users.csv')
dim(edges)
dim(users)
str(users)users
users
users[1:10]
users[1:10,]
head(edges)
edges[id=3981,]
edges[id==3981,]
edges[V1==3981,]
edges[V1=3981,]
edges[V1=3981]
edges$V1[V1==3981]
edges$V1[V1==3981,]
str(edges)
edges$V1[edges$V1==3981,]
edges$V1[edges$V1==3981]
edges[edges$V1==3981]
edges[edges$V1==3981,]
table(edges$V1)
summary(table(edges$V1))
avg(table(edges$V1))
mean(table(edges$V1))
str(users)
edges = read.csv('edges.csv')
users = read.csv('users.csv')
dim(edges)
dim(users)
table(edges$V1)
table(edges$V2)
mean(table(edges$V2))
mean(table(edges$V1))
table[table$V1==3986,]
edges[edges$V1==3986,]
users[1:2,]
edges[edges$V1==3981,]
edges[edges$V1==3982,]
edges[edges$V1==3998,]
table(edges$V1)
table(edges$V1)-1
mean(table(edges$V1)-1)
summary(table(edges$V1)-1)
mean(table(edges$V1)+1)
mean(table(edges$V2)+1)
head(edges)
edges[edges$V1==4023,]
edges[edges$V1==4030,]
edges[edges$V1==4031,]
edges[edges$V1==4019,]
edges[edges$V1==4026,]
mean(table(edges$V1))
mean(table(edges$V1))+1
mean ( (mean(table(edges$V1))+1) , (mean(table(edges$V2))+1) )
(mean(table(edges$V1))+1)
(mean(table(edges$V2))+1)
mean(table(edges$V1))
2*mean(table(edges$V1))
nrow(edges)
(nrow(edges)*2)/nrow(users)
head(users)
table(users$locale)
table(users$locale, users$school)
install.packages('igraph')
library(igraph)
?graph.data.frame
g = graph.data.frame(edges, TRUE, users)
g
plot(g)
plot(g, vertex.size = 5, vertex.label = NA, vertex.shape = "sphere")
g = graph.data.frame(edges, FALSE, users)
plot(g, vertex.size = 5, vertex.label = NA, vertex.shape = "sphere")
plot(g, vertex.size=5, vertex.label=NA)
plot(g, vertex.size=5)
plot(g, vertex.size=5, vertex.label=NA)
degree(g)
mean(degree(g) )
degree(g)
barplot(sort(degree(g)))
(sort(degree(g)))
V(g)$size = degree(g)/2+2
g
plot(g, vertex.label=NA)
plot(g)
plot(g, vertex.label=NA)
degree(g)/2+2
sort(degree(g)/2+2)
V(g)$color = "black"
V(g)$color[V(g)$gender == "A"] = "red"
V(g)$color[V(g)$gender == "B"] = "gray"
#replot the network
plot(g, vertex.label=NA)
str(users)
table(users$school)
# change the color scheme according to school
V(g)$color = "black"
V(g)$color[V(g)$school == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "gray"
#replot the network
plot(g, vertex.label=NA)
table(users$locale)
V(g)$color = "black"
V(g)$color[V(g)$locale == "A"] = "red"
V(g)$color[V(g)$locale == "B"] = "gray"
#replot the network
plot(g, vertex.label=NA)
?igraph.plotting
#replot the network
plot(g, vertex.label=NA)
tweets<-read.csv('tweets.csv', stringsAsFactors = FALSE)
str(tweets)
corpus = Corpus(VectorSource(tweets$Tweet))
# Load tm package
library(tm)
# Create corpus
corpus = Corpus(VectorSource(tweets$Tweet))
corpus#
corpus
corpus[[1]]
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
stopwords("english")[1:10]
corpus = tm_map(corpus, removeWords, stopwords("english"))
# Create corpus
corpus = Corpus(VectorSource(tweets$Tweet))
# Convert to lower-case
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
# Remove punctuation
corpus = tm_map(corpus, removePunctuation)
# Look at stop words
stopwords("english")[1:10]
# Remove stopwords and apple
corpus = tm_map(corpus, removeWords, stopwords("english"))
corpus[[1]]
corpus[[1]]$content
# Create matrix
frequencies = DocumentTermMatrix(corpus)
frequencies
inspect(frequencies[1000:1005,505:515])
findFreqTerms(frequencies, lowfreq=20)
install.packages("wordcloud")
library(wordcloud)
allTweets = DocumentTermMatrix(corpus)
rownames(allTweets)
colnames(allTweets)
colSums(allTweets)
rowSums(allTweets)
str(allTweets)
allTweets = tweetsSparse = as.data.frame(as.matrix(frequencies))
colnames(allTweets)
rowSums(allTweets)
colSums(allTweets)
sort(colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25))
negativeTweets = subset(allTweets, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets))
wordcloud(colnames(negativeTweets), colSums(negativeTweets), random.order )
wordcloud(colnames(negativeTweets), colSums(negativeTweets), random.order=FALSE )
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), random.order=FALSE)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), rot.per=1)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), rot.per=2)
?rot.per
?wordcloud
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), rot.per=2)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), rot.per=0.5)
ordcloud(colnames(negativeTweets), colSums(negativeTweets), random.order=FALSE )
wordcloud(colnames(negativeTweets), colSums(negativeTweets), random.order=FALSE )
wordcloud(colnames(negativeTweets), colSums(negativeTweets), random.order=FALSE, random.color=TRUE )
wordcloud(colnames(negativeTweets), colSums(negativeTweets), random.order=FALSE, random.color=TRUE )
library("RColorBrewer")
brewer.pal()
display.brewer.all()
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25),
colors=brewer.pal(9, "Blues")
)
brewer.pal(9, "Blues")
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25),
colors=brewer.pal(9, "Blues")[c(-5, -6, -7, -8, -9)]
)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25)#,
#colors=brewer.pal(9, "Blues")[c(-5, -6, -7, -8, -9)]
)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25),
colors=brewer.pal(9, "Blues")[c(-1, -2, -3, -4)]
)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25),
colors=brewer.pal(9, "Blues")[c(1, 2, 3, 4)]
)
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25),
brewer.pal(9, "Blues")[c(5, 6, 7, 8, 9)]
)
parole=read.csv('parole.csv')
str(parole)
table(parole$male)
